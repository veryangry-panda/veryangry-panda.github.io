<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Codeforces Round]]></title>
    <url>%2F2018%2F09%2F18%2FCF%23510-B%2F</url>
    <content type="text"><![CDATA[题目题目链接：http://codeforces.com/contest/1042/problem/B 思路我们将果汁的价格当作vitamin的值，将所含的vitamin进行排序之后，有7种可能性：A,B,C,AB,AC,BC,ABC 将这七个值初始化为无穷大，每输入一个样例（果汁），如果这个值小于当前变量的值，就更新。经过这个操作后，这七个变量都是能得到的最小值了。 接下来只要将这七个变量组合成ABC，就得到了一种方案。有8种组合：A+B+C, A+BC, B+AC, C+AB, AB+BC, AB+AC, AC+BC, ABC。 然后可以用一个数组存一下每种方案的值，取一个最小值就行了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;bits/stdc++.h&gt;using namespace std;#define INF 0x3f3f3f3fint main()&#123; int n; cin&gt;&gt;n; int A=INF, B=INF, C=INF, AB=INF, AC=INF, BC=INF, ABC=INF; for(int i=0;i&lt;n;i++) &#123; int cost; string s; cin&gt;&gt;cost&gt;&gt;s; sort(s.begin(),s.end()); if(s.size()==1) &#123; if(s[0]=='A'&amp;&amp;cost&lt;A) A=cost; if(s[0]=='B'&amp;&amp;cost&lt;B) B=cost; if(s[0]=='C'&amp;&amp;cost&lt;C) C=cost; &#125; else if(s.size()==2) &#123; if(s[0]=='A'&amp;&amp;s[1]=='B'&amp;&amp;cost&lt;AB) AB=cost; if(s[0]=='A'&amp;&amp;s[1]=='C'&amp;&amp;cost&lt;AC) AC=cost; if(s[0]=='B'&amp;&amp;s[1]=='C'&amp;&amp;cost&lt;BC) BC=cost; &#125; else if(cost&lt;ABC) ABC=cost; &#125; //cout&lt;&lt;A&lt;&lt;" "&lt;&lt;B&lt;&lt;" "&lt;&lt;C&lt;&lt;" "&lt;&lt;AB&lt;&lt;" "&lt;&lt;AC&lt;&lt;" "&lt;&lt;BC&lt;&lt;" "&lt;&lt;ABC&lt;&lt;endl; int max[8]; memset(max,-1,sizeof(int)*8); // for(int i=0;i&lt;5;i++) // cout&lt;&lt;max[i]&lt;&lt;" "; if((A+B+C)&lt;INF) max[0]=A+B+C; if((A+BC)&lt;INF) max[1]=A+BC; if((B+AC)&lt;INF) max[2]=B+AC; if((C+AB)&lt;INF) max[3]=C+AB; if(ABC&lt;INF) max[4]=ABC; if((AB+BC)&lt;INF) max[5]=AB+BC; if((AC+BC)&lt;INF) max[6]=AC+BC; if((AB+AC)&lt;INF) max[7]=AB+AC; vector&lt;int&gt; con; for(int i=0;i&lt;8;i++) &#123; if(max[i]&gt;-1) con.push_back(max[i]); &#125; int x=INF; if(con.empty()) x=-1; for(int i=0;i&lt;con.size();i++) &#123; if(con[i]&lt;x) x=con[i]; &#125; cout&lt;&lt;x&lt;&lt;endl;&#125;]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round]]></title>
    <url>%2F2018%2F09%2F18%2FCF%23510-A%2F</url>
    <content type="text"><![CDATA[题目题目链接：http://codeforces.com/contest/1042/problem/A 思路首先可以肯定的是，k可能的最大值一定是m+本来长凳上坐着的最多的人数 然后来解决k可能的最小值的问题： 可以这样想，想要k最小，那么其他长凳上肯定要坐满，即所有的长凳上的人数均匀分布。我们可以分两步来达到这个目的： 先把长凳上的人数全部填成一样的（和坐的最多的人数一样），如果填不满，那k的最小值直接就是当前坐着的最大值。 将剩下的人数依次放在每个长凳上，然后想办法得到最多人数即可 代码12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,m; cin&gt;&gt;n&gt;&gt;m; int a[n]; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; &#125; sort(a,a+n); int sum=accumulate(a,a+n,0); int mink,maxk; maxk=a[n-1]+m; mink=a[n-1]; if(m+sum&gt;a[n-1]*n) &#123; double x=(m+sum-a[n-1]*n)*1.0/n; if((m+sum-a[n-1]*n)%n&gt;0) x++; mink=mink+x; &#125; cout&lt;&lt;mink&lt;&lt;" "&lt;&lt;maxk&lt;&lt;endl;&#125;]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NYOJ-47 过河问题]]></title>
    <url>%2F2018%2F09%2F10%2FNYOJ-47%2F</url>
    <content type="text"><![CDATA[题目描述在漆黑的夜里，N位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，N个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，N人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这N人尽快过桥。 输入第一行是一个整数T(1&lt;=T&lt;=20)表示测试数据的组数每组测试数据的第一行是一个整数N(1&lt;=N&lt;=1000)表示共有N个人要过河每组测试数据的第二行是N个整数Si,表示此人过河所需要花时间。(0&lt;Si&lt;=100) 输出输出所有人都过河需要用的最少时间 样例输入1 4 1 2 5 10 样例输出17 思路只有一个手电筒，所以只能是两个人过河后再派一个人将手电筒送回来过河才能继续。 要求过河需要的最少时间，我一开始的思路是要想时间最少，送手电筒回来的时间要是最短的，所以应该由过河最快的人一次将所有人送过去。后来发现这样的思路有局限性，就是当第二快的人与最快的人时间相差不大的时候，第二慢的人又与最慢的人相差不大的时候，得不到最优解。 上网找了下思路，发现核心思路是将最慢的两个人送过河。而过河方法有两种（以下叙述将最快的记作1，第二快的记作2，最慢的记作n，第二慢的记作n-1）： 1： 1先将2送过去，1回来； n-1和n一起过河，2将手电筒送回来； 2： 1将n送过去，1回来； 1将n-1送过去，1回来； 两次花费的时间分别是 t[2]+t[1]+t[n]+t[2] 和 t[n]+t[1]+t[n-1]+t[2] 我们只要判断这个时间哪个小，就采取哪种送法，这样每次能送过去2个最慢的人，依次进行，最后可能会剩下2个或者3个人。两个人的话就一起过河，三个人就1先将3送过去，1回来再和2一起过。 另外，千万别忘了只有一个人的情况，本人卡在这里卡了好久，下意识就认为有很多人过河，其实题目并没有说明人数，所以一个人的情况也要考虑。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int m; cin&gt;&gt;m;//m组测试数据 while(m--) &#123; int n;//n个人 cin&gt;&gt;n; int a[n]; for(int j=0;j&lt;n;j++) &#123; cin&gt;&gt;a[j]; &#125; //先对过桥时间的数组排序 sort(a,a+n);//已经从大到小排序 int sum=0; while(n&gt;=4) &#123; if((a[n-2]+a[0])&lt;(2*a[1])) &#123; sum=sum+2*a[0]+a[n-1]+a[n-2]; &#125; else &#123; sum=sum+a[0]+2*a[1]+a[n-1]; &#125; n=n-2; &#125; if(n==3) &#123; sum=sum+a[0]+a[1]+a[n-1]; &#125; if(n==2) &#123; sum=sum+a[n-1]; &#125; if(n==1) sum=sum+a[n-1]; cout&lt;&lt;sum&lt;&lt;endl; &#125;&#125;]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NYOJ-14 会场安排问题]]></title>
    <url>%2F2018%2F09%2F10%2FNYOJ-14%2F</url>
    <content type="text"><![CDATA[题目描述学校的小礼堂每天都会有许多活动，有时间这些活动的计划时间会发生冲突，需要选择出一些活动进行举办。小刘的工作就是安排学校小礼堂的活动，每个时间最多安排一个活动。现在小刘有一些活动计划的时间表，他想尽可能的安排更多的活动，请问他该如何安排。 输入第一行是一个整型数m(m&lt;100)表示共有m组测试数据。每组测试数据的第一行是一个整数n(1&lt;n&lt;10000)表示该测试数据共有n个活动。随后的n行，每行有两个正整数Bi,Ei(0&lt;=Bi,Ei&lt;10000),分别表示第i个活动的起始与结束时间（Bi&lt;=Ei) 输出对于每一组输入，输出最多能够安排的活动数量。每组的输出占一行 样例输入2 2 1 10 10 11 3 1 10 10 11 11 20 样例输出1 2 提示注意：如果上一个活动在t时间结束，下一个活动最早应该在t+1时间开始 思路继续延续贪心的思想，要想办的活动数量最多，那么活动结束的时间越早越好，所以我们可以将活动按照结束时间从小到大排序，每次加入结束时间最早的活动，就可以解决此问题了 代码1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;using namespace std;class activity&#123;public: int begin; int end;&#125;;bool cmp(activity a,activity b)&#123; return a.end&lt;b.end;&#125;int main()&#123; int m; cin&gt;&gt;m;//m组测试数据 while(m--) &#123; int n;//n个活动 cin&gt;&gt;n; activity a[n]; for(int j=0;j&lt;n;j++) &#123; cin&gt;&gt;a[j].begin&gt;&gt;a[j].end; &#125; sort(a,a+n,cmp);//对活动排序 int index=0; int time=-1; for(int i=0;i&lt;n;i++) &#123; if(a[i].begin&gt;time) &#123; time=a[i].end; index++; &#125; &#125; cout&lt;&lt;index&lt;&lt;endl; &#125;&#125;]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NYOJ-12 喷水装置（二）]]></title>
    <url>%2F2018%2F09%2F08%2FNYOJ-12%2F</url>
    <content type="text"><![CDATA[题目描述有一块草坪，横向长w,纵向长为h,在它的橫向中心线上不同位置处装有n(n&lt;=10000)个点状的喷水装置，每个喷水装置i喷水的效果是让以它为中心半径为Ri的圆都被润湿。请在给出的喷水装置中选择尽量少的喷水装置，把整个草坪全部润湿。 输入第一行输入一个正整数N表示共有n次测试数据。每一组测试数据的第一行有三个整数n,w,h，n表示共有n个喷水装置，w表示草坪的横向长度，h表示草坪的纵向长度。随后的n行，都有两个整数xi和ri,xi表示第i个喷水装置的的横坐标（最左边为0），ri表示该喷水装置能覆盖的圆的半径。 输出每组测试数据输出一个正整数，表示共需要多少个喷水装置，每个输出单独占一行。 如果不存在一种能够把整个草坪湿润的方案，请输出0。 样例输入2 2 8 6 1 1 4 5 2 10 6 4 5 6 5 样例输出1 2 思路这道题经过类似前面“喷水装置（一）”的分析转换，依旧是一个贪心问题，不过他有所不同的是加入了喷水装置的坐标，这就让我们不能随意摆放装置的位置。 这道题转换过后是一个区间完全覆盖问题。 何为区间完全覆盖问题，下面举一个例子来说明： 问题描述：给定一个长度为m的区间，再给出n条线段的起点和终点（注意这里是闭区间），求最少使用多少条线段可以将整个区间完全覆盖样例：区间长度8，可选的覆盖线段[2,6],[1,4],[3,6],[3,7],[6,8],[2,4],[3,5]解题过程:1 将每一个区间按照左端点递增顺序排列，拍完序后为[1,4]，[2,4]，[2,6]，[3,5]，[3,6]，[3,7]，[6,8]2 设置一个变量表示已经覆盖到的区域。再剩下的线段中找出所有左端点小于等于当前已经覆盖到的区域的右端点的线段中，右端点最大的线段在加入，直到已经覆盖全部的区域3过程:假设第一步加入[1,4]，那么下一步能够选择的有[2,6]，[3,5]，[3,6]，[3,7]，由于7最大，所以下一步选择[3,7]，最后一步只能选择[6,8]，这个时候刚好达到了8退出，所选区间为34贪心证明:需要最少的线段进行覆盖，那么选取的线段必然要尽量长，而已经覆盖到的区域之前的地方已经无所谓了，（可以理解成所有的可以覆盖的左端点都是已经覆盖到的地方），那么真正能够使得线段更成的是右端点，左端点没有太大的意义，所以选择右端点来覆盖 回到这道题中，经过跟“喷水装置（一）”类似的转换，我们可以将喷水装置的作用范围由一个圆化为一个区间，接着就可以使用贪心的方法来解决这个问题了 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081 #include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;algorithm&gt;#include &lt;math.h&gt;using namespace std;struct sb&#123; double from,to;&#125;a[10005];bool cmp(sb t1,sb t2)&#123; if(t1.from&lt;t2.from) return true; if(t1.from==t2.from&amp;&amp;t1.to&gt;t2.to) return true; return false;&#125;int main()&#123; int t,n,i; double d,h,r,w,x; cin&gt;&gt;t; while(t--) &#123; int count=0,flag=0,sum=0; double begin=0,end=0; cin&gt;&gt;n&gt;&gt;w&gt;&gt;h; for(i=0;i&lt;n;i++) &#123; cin&gt;&gt;x&gt;&gt;r; d=sqrt(r*r-((h/2)*(h/2))); if(r&gt;=(h/2)) &#123; if(x-d&gt;w||x+d&lt;0) continue; a[count].from=x-d; a[count].to=x+d; count++; &#125; &#125; if(count==0) &#123; cout&lt;&lt;0&lt;&lt;endl; continue; &#125; std::sort(a,a+count,cmp); if(a[0].from&gt;0) &#123; cout&lt;&lt;0&lt;&lt;endl; continue; &#125; double max=0; int num; for(i=0;i&lt;count;i++) &#123; if(a[i].from&lt;=end) &#123; for(int num=i;num&lt;count;num++) &#123; if(a[num].to&gt;max&amp;&amp;a[num].to&gt;end&amp;&amp;a[num].from&lt;=end) &#123; max=a[num].to; i=num; &#125; &#125; end=max; sum++; &#125; if(end&gt;w) break; &#125; if(end&lt;w||begin==end) &#123; cout&lt;&lt;0&lt;&lt;endl; continue; &#125; cout&lt;&lt;sum&lt;&lt;endl; &#125; return 0;&#125; 出现的问题上面贴出的代码来自互联网，为什么不贴自己的代码呢，因为我的代码出现的超时，这里也附上一个刚学到的代码超时的解决思路（来自某大牛）。对时间复杂度贡献最大的一般是循环，超时一般都发生在这种地方，所以首先检查你的代码中循环最多次的地方，如果能够把循环的重数降低，或者加上if等条件判断语句，再或者用break在某些情况下跳出循环，有利于缓解超时问题。]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NYOJ-6 喷水装置（一）]]></title>
    <url>%2F2018%2F09%2F08%2FNYOJ-6%2F</url>
    <content type="text"><![CDATA[题目描述现有一块草坪，长为20米，宽为2米，要在横中心线上放置半径为Ri的喷水装置，每个喷水装置的效果都会让以它为中心的半径为实数Ri(0&lt;Ri&lt;15)的圆被湿润，这有充足的喷水装置i（1&lt;i&lt;600)个，并且一定能把草坪全部湿润，你要做的是：选择尽量少的喷水装置，把整个草坪的全部湿润。 输入第一行m表示有m组测试数据每一组测试数据的第一行有一个整数数n，n表示共有n个喷水装置，随后的一行，有n个实数ri，ri表示该喷水装置能覆盖的圆的半径。 输出输出所用装置的个数 样例输入2 5 2 3.2 4 4.5 6 10 1 2 3 1 2 1.2 3 1.1 1 2 样例输出2 5 思路首先了解一下贪心法的基本知识 贪心法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。 贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。 理解一下这道题题意，草坪的长和宽是定值，喷水装置的作用范围是一个圆形，圆形与矩形草坪相交。简单的画出示意图，由于题目说草坪一定能被填满，所以不考虑半径小于1m的情况，即我们只需把草坪的长填满，就填满了整个草坪。 用简单的勾股定理可以把半径转化为占有的长度，即d=sqrt(r*r-1)，到这里这个问题就变成了一个简单的贪心问题了。 我们对喷水装置的半径进行排序，从半径最大的开始选取，依次添加其他的喷水装置，知道把整个草坪填满。 代码123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int m; cin&gt;&gt;m;//m组测试数据 for(int i=0;i&lt;m;i++) &#123; int n;//n个喷水装置 cin&gt;&gt;n; double a[n]; for(int j=0;j&lt;n;j++) &#123; double x; cin&gt;&gt;x; a[j]=sqrt(x*x-1);//将半径转化为作用范围 &#125; //先对喷水装置的数组排序 sort(a,a+n);//对作用范围进行排序 int index=0;//记录添加的喷水装置的数量 double sum=0;//记录当前充满的长度 for(int j=n-1;j&gt;=0;j--) &#123; sum=sum+a[j];//将喷水装置添加进来 index++; if(sum&gt;=10) break; &#125; cout&lt;&lt;index&lt;&lt;endl; &#125;&#125;]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一次写博客]]></title>
    <url>%2F2018%2F09%2F04%2Ffirst%20blog%2F</url>
    <content type="text"><![CDATA[在朋友的怂恿下，我越发觉得写博客是一件有意义的事情，并不期望有多少点击量，就是记录一下自己的生活和自己的学习经历。 我希望在这里记录一个真实的自己！]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
